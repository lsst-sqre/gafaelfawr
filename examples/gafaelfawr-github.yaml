# Example configuration file for Gafaelfawr using GitHub.
#
# The recommended installation method is to use the Helm chart, which will
# generate this file based on Helm values as a ConfigMap.  However, this
# example may be useful if you need to modify the Helm chart or
# hand-generate the documentation.
#
# All example.com values in this example should be changed to the domain
# name under which you're running Gafaelfawr.

# Realm for WWW-Authenticate 401 error.
realm: "example.com"

# File contents should be the result of gafaelfawr generate-session-secret.
sessionSecretFile: "/path/to/session-secret"

# The URL of and password for a Redis instance used for storing sessions.
redisUrl: "redis://redis.example.com:6379/0"
redisPasswordFile: "/path/to/redis-password"

# Replace <password> with the database password and example.com with the
# hostname of the PostgreSQL database.  In environments where the
# configuration file is not private (such as when it's taken from a
# Kubernetes ConfigMap), use the GAFAELFAWR_DATABASE_URL environment
# variable to set this parameter and don't include it in the settings
# file.
databaseUrl: "postgresql://gafaelfawr:<password>@example.com/gafaelfawr"

# File contents should be a token generated via gafaelfawr generate-token.
bootstrapTokenFile: "/path/to/bootstrap-token"

# How long Gafaelfawr-issued tokens should live by default.
tokenLifetimeMinutes: 1440 # 1 day

# The IP address ranges used internally in the Kubernetes cluster.  Used
# to determine the external IP address for logging purposes.
proxies:
  - "10.0.0.0/8"

# Where to send the user after logging out.
afterLogoutUrl: "https://example.com/"

# To get these values, go to Settings > Developer Settings for either a
# GitHub user or an organization, go into OAuth Apps, and create a new
# application.
github:
  clientId: "<github-client-id>"
  clientSecretFile: "/path/to/github-client-secret"

# Replace this with a list of users who should have admin rights when
# bootstrapping a fresh database.
initialAdmins:
  - "example"

# Sample values for scopes.  You can replace these with anything you want
# to use for a scope.  Used to populate the new token creation page.
knownScopes:
  "admin": "Administrative access"
  "admin:token": "Can create and modify tokens for any user"
  "read:all": "Can read anything"
  "user:token": "Can create and modify user tokens"

# Map scopes to lists of groups that provide that scope.
#
# With an OpenID Connect provider, the groups will be taken from an
# isMemberOf claim in the token returned by that provider.
#
# To get scopes based on GitHub team membership, replace <org> with the name
# of the GitHub organization and <team> with the name of the team in that
# organization.  Members of that team will then get the scope listed on the
# left.  Add as many entries as you'd like.
group_mapping:
  "admin":
    - github:
        organization: "<org>"
        team: "<team>"
  "read:all":
    - github:
        organization: "<org>"
        team: "<other-team>"
