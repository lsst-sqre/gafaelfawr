# Settings intended for a development server running on port 8080 on
# localhost.  Fill in the GitHub client ID and put the corresponding
# secret key in examples/secrets/github-client-secret, and then run tox -e
# run to bring up a test server.
#
# WARNING: The session secret, RSA private key, and bootstrap token
# included in this package are published to the entire world and are
# therefore not secure in any way.  Use them ONLY for testing and ONLY
# with a development server exposed only to localhost.
#
# Anyone in the world can decrypt and forge any identity information of
# any server that uses these settings.

realm: "localhost"
loglevel: "DEBUG"
sessionSecretFile: "examples/secrets/session-secret"
databaseUrl: "postgresql://gafaelfawr:INSECURE@localhost/gafaelfawr"

# This Redis will be started by the docker-compose.yaml file at the top
# level of the repository.
redisUrl: "redis://localhost:6379/0"
redisPasswordFile: "examples/secrets/redis-password"

# WARNING: This is public and entirely insecure.  Use only for local
# development not accessible to the Internet.
bootstrapTokenFile: "examples/secrets/bootstrap-token"

# How long Gafaelfawr-issued tokens should live by default.
tokenLifetimeMinutes: 1440 # 1 day

# Where to send the user after logging out.
afterLogoutUrl: "http://localhost:8080"

# To get these values, go to Settings > Developer Settings for either a
# GitHub user or an organization, go into OAuth Apps, and create a new
# application.  Set the homepage URL to http://localhost:8080/ and the
# authorization callback URL to http://localhost:8080/login.
github:
  clientId: "<github-client-id>"
  clientSecretFile: "examples/secrets/github-client-secret"

# Configuration for the Gafaelfawr OpenID Connect server.
oidcServer:
  issuer: "http://localhost:8080"
  keyId: "localhost-key-id"
  audience: "http://localhost"
  keyFile: "examples/secrets/issuer-key"
  secretsFile: "examples/secrets/oidc-clients.json"

# Replace this user with your GitHub username.
initialAdmins:
  - "example"

# Sample values.  You can replace these with anything you want to use
# for a scope.
knownScopes:
  "admin": "Administrative access"
  "admin:token": "Can create and modify tokens for any user"
  "read:all": "Can read anything"
  "user:token": "Can create and modify user tokens"

# To get scopes based on GitHub team membership, replace <org> with the name
# of the GitHub organization and <team> with the name of the team in that
# organization.  Members of that team will then get the scope listed on the
# left.  Add as many entries as you'd like.
groupMapping:
  "admin":
    - github:
        organization: "<org>"
        team: "<team>"
  "read:all":
    - github:
        organization: "<org>"
        team: "<other-team>"
