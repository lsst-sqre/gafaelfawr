apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: small
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?scope=read:all&service=tap"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: small-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /foo
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: notebook
  namespace: {namespace}
  annotations:
    another.annotation.example.com: bar
    nginx.ingress.kubernetes.io/auth-cache-key: "$http_cookie$http_authorization"
    nginx.ingress.kubernetes.io/auth-cache-duration: "200 202 401 5m"
    nginx.ingress.kubernetes.io/auth-method: "GET"
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-signin: "https://foo.example.com/login"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?notebook=true&minimum_lifetime=600&scope=read:all&satisfy=any"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
    some-label: foo
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: notebook-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /bar
            pathType: Exact
            backend:
              service:
                name: something
                port:
                  number: 80
  tls:
    - hosts:
        - example.com
      secretName: tls-secret
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: internal
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?auth_type=basic&delegate_to=some-service&delegate_scope=read:all&delegate_scope=read:some&scope=read:all&scope=read:some"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: internal-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /baz
            pathType: ImplementationSpecific
            backend:
              service:
                name: something
                port:
                  number: 80
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: authorization
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?allow_cookies=false&delegate_to=some-service&delegate_scope=read:all&use_authorization=true&scope=read:all"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      add_header "X-Foo" "bar";
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: authorization-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: foo.example.com
      http:
        paths:
          - path: /foo/bar
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: anonymous
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/anonymous"
    some.annotation: foo
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: anonymous-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.org
      http:
        paths:
          - path: /foo/baz
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: username
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?scope=read:all&username=some-user"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: username-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /username
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?only_service=portal&only_service=vo-cutouts&scope=read:all&service=uws"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: service-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /service
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: service-any
  namespace: {namespace}
  annotations:
    nginx.ingress.kubernetes.io/auth-method: GET
    nginx.ingress.kubernetes.io/auth-response-headers: "Authorization,Cookie,X-Auth-Request-Email,X-Auth-Request-Service,X-Auth-Request-Token,X-Auth-Request-User"
    nginx.ingress.kubernetes.io/auth-url: "http://gafaelfawr.gafaelfawr.svc.cluster.local:8080/ingress/auth?only_service=vo-cutouts&service=uws"
    nginx.ingress.kubernetes.io/configuration-snippet: |
      {snippet}
  creationTimestamp: {any}
  generation: {any}
  labels:
    app.kubernetes.io/managed-by: Gafaelfawr
  managedFields: {any}
  ownerReferences:
    - apiVersion: gafaelfawr.lsst.io/v1alpha1
      blockOwnerDeletion: true
      controller: true
      kind: GafaelfawrIngress
      name: service-any-ingress
      uid: {any}
  resourceVersion: {any}
  uid: {any}
spec:
  ingressClassName: nginx
  rules:
    - host: example.com
      http:
        paths:
          - path: /service/any
            pathType: Prefix
            backend:
              service:
                name: something
                port:
                  name: http
status: {any}
