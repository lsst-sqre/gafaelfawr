[project]
# https://packaging.python.org/en/latest/specifications/declaring-project-metadata/
name = "gafaelfawr"
description = "Token-based authentication and authorization system"
license = {file = "LICENSE"}
readme = "README.md"
keywords = [
    "rubin",
    "lsst",
]
# https://pypi.org/classifiers/
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Natural Language :: English",
    "Operating System :: POSIX",
    "Typing :: Typed",
]
requires-python = ">=3.13"
dependencies = [
    "alembic[tz]",
    "asyncpg",
    "bonsai>=1.5.0",
    "cachetools",
    "click>8.1.4",
    "cryptography",
    "fastapi>=0.100",
    "google-cloud-firestore",
    "httpx",
    "kopf",
    "kubernetes-asyncio",
    "jinja2",
    "pydantic>=2.10",
    "pydantic-settings!=2.6.0",
    "python-multipart",
    "pyjwt",
    "pyyaml",
    "redis>=4.2.0",
    "safir[db,kubernetes]>=9.1.0",
    "sentry-sdk[fastapi]",
    "sqlalchemy>=2.0.0",
    "starlette",
    "structlog",
    "uvicorn[standard]",
]
dynamic = ["version"]

[[project.authors]]
name = "Association of Universities for Research in Astronomy, Inc. (AURA)"
email = "sqre-admin@lists.lsst.org"

[project.urls]
Homepage = "https://gafaelfawr.lsst.io/"
Source = "https://github.com/lsst-sqre/gafaelfawr"
"Change log" = "https://gafaelfawr.lsst.io/changelog.html"
"Issue tracker" = "https://github.com/lsst-sqre/gafaelfawr/issues"

[build-system]
requires = [
    "setuptools>=61",
    "setuptools_scm[toml]>=6.2",
]

[project.scripts]
gafaelfawr = "gafaelfawr.cli:main"

[tool.black]
line-length = 79
target-version = ["py313"]

[tool.coverage.run]
parallel = true
branch = true
source = ["gafaelfawr"]

[tool.coverage.paths]
source = ["src", ".tox/*/site-packages"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:"
]

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
ignore_missing_imports = true
local_partial_types = true
no_implicit_reexport = true
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin",
]
show_error_codes = true
strict_equality = true
warn_redundant_casts = true
warn_unreachable = true
warn_unused_ignores = true

[tool.pydantic-mypy]
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true

[tool.pytest.ini_options]
asyncio_default_fixture_loop_scope = "function"
asyncio_mode = "strict"
filterwarnings = [
    # Google modules use PyType_Spec in a deprecated way.
    "ignore:Type google\\..*metaclass.* custom tp_new:DeprecationWarning",
    # Bug in seleniumwire.
    "ignore:.*X509Extension support in pyOpenSSL:DeprecationWarning",
    # Some sphinxcontrib package and seleniumwire use pkg_resources.
    "ignore:pkg_resources is deprecated as an API:DeprecationWarning",
    "ignore:.*pkg_resources\\.declare_namespace:DeprecationWarning",
]
# The python_files setting is not for test detection (pytest will pick up any
# test files named *_test.py without this setting) but to enable special
# assert processing in any non-test supporting files under tests. We
# conventionally put test support functions under tests.support and may
# sometimes use assert in test fixtures in conftest.py, and pytest only
# enables magical assert processing (showing a full diff on assert failures
# with complex data structures rather than only the assert message) in files
# listed in python_files.
python_files = [
    "tests/*.py",
    "tests/*/*.py"
]

# Use the generic Ruff configuration in ruff.toml and extend it with only
# project-specific settings.
[tool.ruff]
extend = "ruff-shared.toml"

[tool.ruff.lint.extend-per-file-ignores]
"tests/cli_test.py" = [
    "ASYNC221", # useful to run subprocess in async tests for Alembic
]

[tool.ruff.lint.isort]
known-first-party = ["gafaelfawr", "tests"]
known-third-party = ["alembic"]
split-on-trailing-comma = false

[tool.scriv]
categories = [
    "Backwards-incompatible changes",
    "New features",
    "Bug fixes",
    "Other changes",
]
entry_title_template = "{{ version }} ({{ date.strftime('%Y-%m-%d') }})"
format = "md"
md_header_level = "2"
new_fragment_template = "file:changelog.d/_template.md.jinja"
skip_fragments = "_template.md.jinja"

[tool.setuptools_scm]
