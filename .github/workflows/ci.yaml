name: CI

env:
  # Current supported uv version. The uv documentation recommends pinning
  # this. The version should match the version used in .pre-commit-config.yaml
  # and frozen in uv.lock.
  UV_VERSION: "0.6.3"

"on":
  merge_group: {}
  pull_request: {}
  push:
    branches-ignore:
      # These should always correspond to pull requests, so ignore them for
      # the push trigger and let them be triggered by the pull_request
      # trigger, avoiding running the workflow twice. This is a minor
      # optimization so there's no need to ensure this is comprehensive.
      - "dependabot/**"
      - "gh-readonly-queue/**"
      - "renovate/**"
      - "tickets/**"
      - "u/**"
    tags:
      - "*"

jobs:
  ui:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Read .nvmrc
        id: node_version
        run: echo NODE_VERSION="$(cat .nvmrc)" >> $GITHUB_OUTPUT

      # First try to restore the fully-installed node modules. If that works
      # (no changes to the JavaScript layer), skip npm i and restoring the
      # cache of downloaded modules. If that fails, restore the cache of the
      # downloaded modules and then run npm clean-install.
      - name: Cache installed Node modules
        uses: actions/cache@v4
        id: node-cache
        with:
          path: ./ui/node_modules
          key: node-${{ steps.node_version.outputs.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      # --force is currently required because react-aria-modal hasn't been
      # updated for the latest React.
      - name: Install Node dependencies
        run: npm ci --force
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: ./ui

      - name: Lint and build the UI
        run: make ui

      # Cache the built web UI in a build artifact so that it can be used by
      # both the test job and the docker job. We only use this artifact
      # internally in this workflow, so only keep it for a day, not the full
      # 90 day default.
      - name: Cache UI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ui
          path: ui/public
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: [ui]
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui
          path: ui/public

      - name: Install extra packages
        run: |
          sudo apt-get update
          sudo apt-get install -y libpq-dev libldap2-dev libsasl2-dev

      - name: Set up Minikube
        uses: medyagh/setup-minikube@v0.0.19
        with:
          kubernetes-version: "v1.27.3"

      - name: Install tox dependencies
        run: uv sync --only-group tox

      - name: Run tox
        run: uv run tox run -e lint,typing,py-full,coverage-report

  changes:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      pull-requests: read
    outputs:
      docs: ${{ steps.filter.outputs.docs }}
      docs-specific: ${{ steps.filter.outputs.docs-specific }}

    steps:
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            docs:
              - "docs/**"
              - "src/gafaelfawr/**"
            docs-specific:
              - "docs/**"

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}

    steps:
      - uses: actions/checkout@v4
        with:
          # Ensure the documentation gets the right version.
          fetch-depth: 0

      - name: Install extra packages
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libpq-dev libldap2-dev libsasl2-dev

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install tox dependencies
        run: uv sync --only-group tox

      - name: Run tox
        run: uv run tox run -e docs

      # Upload docs:
      # - on pushes to main, merge queues, and workflow dispatches
      # - on pushes to tickets/ branches if docs/ directory content changed
      - uses: lsst-sqre/ltd-upload@v1
        with:
          project: gafaelfawr
          dir: "docs/_build/html"
          username: ${{ secrets.LTD_USERNAME }}
          password: ${{ secrets.LTD_PASSWORD }}
        if: >
          (github.event_name == 'push' && github.ref_name == 'main')
          || (github.event_name == 'merge_group')
          || (github.event_name == 'workflow_dispatch')
          || (github.event_name == 'pull_request'
              && startsWith(github.head_ref, 'tickets/')
              && steps.filter.outputs.docs-specific == 'true')

  linkcheck:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    needs: changes
    if: ${{ needs.changes.outputs.docs == 'true' }}

    steps:
      - uses: actions/checkout@v4

      - name: Install extra packages
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz libpq-dev libldap2-dev libsasl2-dev

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          version: ${{ env.UV_VERSION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"

      - name: Install tox dependencies
        run: uv sync --only-group tox

      - name: Run tox
        run: uv run tox run -e docs-linkcheck

  build:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 10

    # Only do Docker builds of tagged releases and pull requests from ticket
    # branches. This will still trigger on pull requests from untrusted
    # repositories whose branch names match our tickets/* branch convention,
    # but in this case the build will fail with an error since the secret
    # won't be set.
    if: >
      github.event_name != 'merge_group'
      && (startsWith(github.ref, 'refs/tags/')
          || startsWith(github.head_ref, 'tickets/'))

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v4
        with:
          name: ui
          path: ui/public

      - uses: lsst-sqre/build-and-push-to-ghcr@v1
        id: build
        with:
          image: ${{ github.repository }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
