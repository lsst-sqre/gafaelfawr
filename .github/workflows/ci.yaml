name: CI

"on":
  push:
    branches-ignore:
      # These should always correspond to pull requests, so ignore them for
      # the push trigger and let them be triggered by the pull_request
      # trigger, avoiding running the workflow twice.  This is a minor
      # optimization so there's no need to ensure this is comprehensive.
      - "dependabot/**"
      - "renovate/**"
      - "tickets/**"
      - "u/**"
    tags:
      - "*"
  pull_request: {}

jobs:
  ui:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v3

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version-file: .nvmrc
          cache: npm
          cache-dependency-path: ui/package-lock.json

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      # First try to restore the fully-installed node modules.  If that
      # works (no changes to the JavaScript layer), skip npm i and
      # restoring the cache of downloaded modules.  If that fails, restore
      # the cache of the downloaded modules and then run npm
      # clean-install.
      - name: Cache installed Node modules
        uses: actions/cache@v3
        id: node-cache
        with:
          path: ./ui/node_modules
          key: node-${{ steps.node_version.outputs.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      # --legacy-peer-deps is currently required because react-aria-modal
      # hasn't been updated for the latest React.
      - name: Install Node dependencies
        run: npm ci --legacy-peer-deps
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: ./ui

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      # This has to happen after installing Node modules because we run
      # eslint and it wants react to be already installed.  We therefore
      # do all the linting here instead of during the test job.
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0

      - name: Build the UI
        run: npm run build
        working-directory: ./ui

      # Cache the built web UI in a build artifact so that it can be used
      # by both the test job and the docker job.  We only use this
      # artifact internally in this workflow, so only keep it for a day,
      # not the full 90 day default.
      - name: Cache UI artifact
        uses: actions/upload-artifact@v3
        with:
          name: ui
          path: ui/public
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: [ui]
    timeout-minutes: 15

    strategy:
      matrix:
        python:
          - "3.11"

    steps:
      - uses: actions/checkout@v3

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v3
        with:
          name: ui
          path: ui/public

      - name: Update package lists
        run: sudo apt-get update

      - name: Install extra packages
        run: sudo apt install -y libpq-dev libldap2-dev libsasl2-dev

      - name: Set up Minikube
        uses: manusa/actions-setup-minikube@v2.7.2
        with:
          minikube version: 'v1.27.1'
          kubernetes version: 'v1.25.2'

      - name: Run tox
        uses: lsst-sqre/run-tox@v1
        with:
          python-version: ${{ matrix.python }}
          tox-envs: "typing,py-full,coverage-report"
          tox-plugins: tox-docker
          cache-key-prefix: "test"

  docs:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v3
        with:
          # Ensure the documentation gets the right version.
          fetch-depth: 0

      - name: Update package lists
        run: sudo apt-get update

      - name: Install extra packages
        run: sudo apt install -y graphviz libpq-dev libldap2-dev libsasl2-dev

      - name: Run tox
        uses: lsst-sqre/run-tox@v1
        with:
          python-version: "3.11"
          tox-envs: "docs,docs-linkcheck"
          cache-key-prefix: "docs"

      # Only attempt documentation uploads for long-lived branches, tagged
      # releases, and pull requests from ticket branches.  This avoids version
      # clutter in the docs and failures when a PR doesn't have access to
      # secrets.
      - name: Upload to LSST the Docs
        uses: lsst-sqre/ltd-upload@v1
        with:
          project: gafaelfawr
          dir: "docs/_build/html"
          username: ${{ secrets.LTD_USERNAME }}
          password: ${{ secrets.LTD_PASSWORD }}
        if: >
          github.event_name != 'pull_request'
          || startsWith(github.head_ref, 'tickets/')

  build:
    runs-on: ubuntu-latest
    needs: [test]
    timeout-minutes: 15

    # Only do Docker builds of tagged releases and pull requests from ticket
    # branches.  This will still trigger on pull requests from untrusted
    # repositories whose branch names match our tickets/* branch convention,
    # but in this case the build will fail with an error since the secret
    # won't be set.
    if: >
      startsWith(github.ref, 'refs/tags/')
      || startsWith(github.head_ref, 'tickets/')

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v3
        with:
          name: ui
          path: ui/public

      - name: Define the Docker tag
        id: vars
        run: echo ::set-output name=tag::$(scripts/docker-tag.sh)

      - name: Print the tag
        id: print
        run: echo ${{steps.vars.outputs.tag}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/lsst-sqre/gafaelfawr:${{ steps.vars.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
