name: CI

"on":
  push:
    branches-ignore:
      # These should always correspond to pull requests, so ignore them for
      # the push trigger and let them be triggered by the pull_request
      # trigger, avoiding running the workflow twice.  This is a minor
      # optimization so there's no need to ensure this is comprehensive.
      - "dependabot/**"
      - "renovate/**"
      - "tickets/**"
      - "u/**"
    tags:
      - "*"
  pull_request: {}

jobs:
  ui:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Read .nvmrc
        id: node_version
        run: echo ::set-output name=NODE_VERSION::$(cat .nvmrc)

      - name: Set up Node
        uses: actions/setup-node@v2
        with:
          node-version: ${{ steps.node_version.outputs.NODE_VERSION }}
          cache: npm
          cache-dependency-path: ui/package-lock.json

      # First try to restore the fully-installed node modules.  If that
      # works (no changes to the JavaScript layer), skip npm i and
      # restoring the cache of downloaded modules.  If that fails, restore
      # the cache of the downloaded modules and then run npm
      # clean-install.
      - name: Cache installed Node modules
        uses: actions/cache@v2
        id: node-cache
        with:
          path: ./ui/node_modules
          key: node-${{ steps.node_version.outputs.NODE_VERSION }}-${{ hashFiles('**/package-lock.json') }}

      - name: Install Node dependencies
        run: npm ci
        if: steps.node-cache.outputs.cache-hit != 'true'
        working-directory: ./ui

      - name: Set up Python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: 3.9

      # This has to happen after installing Node modules because we run
      # eslint and it wants react to be already installed.  We therefore
      # do all the linting here instead of during the test job.
      - name: Run pre-commit
        uses: pre-commit/action@v2.0.3

      - name: Build the UI
        run: npm run build
        working-directory: ./ui

      # Cache the built web UI in a build artifact so that it can be used
      # by both the test job and the docker job.  We only use this
      # artifact internally in this workflow, so only keep it for a day,
      # not the full 90 day default.
      - name: Cache UI artifact
        uses: actions/upload-artifact@v2
        with:
          name: ui
          path: ui/public
          retention-days: 1

  test:
    runs-on: ubuntu-latest
    needs: [ui]

    strategy:
      matrix:
        python:
          - "3.9"
          - "3.10"

    steps:
      - uses: actions/checkout@v2

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v2
        with:
          name: ui
          path: ui/public

      - name: Set up Python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: ${{ matrix.python }}

      - name: Install extra packages
        run: sudo apt install libpq-dev libldap2-dev libsasl2-dev

      - name: Install tox
        run: pip install tox tox-docker

      - name: Cache tox environments
        id: cache-tox
        uses: actions/cache@v2
        with:
          path: .tox
          # requirements/*.txt and tox.ini have versioning or dependency
          # information that would impact the tox environment.
          key: tox-${{ matrix.python }}-${{ hashFiles('requirements/*.txt') }}-${{ hashFiles('tox.ini') }}
          restore-keys: |
            tox-${{ matrix.python }}-${{ hashFiles('requirements/*.txt') }}-

      - name: Run tox
        run: tox -e typing,py-coverage,coverage-report

  docs:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v3.0.0
        with:
          python-version: 3.9

      - name: Install extra packages
        run: sudo apt install libpq-dev libldap2-dev libsasl2-dev

      - name: Install tox and LTD Conveyor
        run: pip install tox ltd-conveyor

      - name: Install graphviz and ImageMagick
        run: sudo apt-get install graphviz imagemagick

      - name: Run tox
        run: tox -e docs

      # Only attempt documentation uploads for long-lived branches, tagged
      # releases, and pull requests from ticket branches.  This avoids version
      # clutter in the docs and failures when a PR doesn't have access to
      # secrets.  This will still trigger on pull requests from untrusted
      # repositories whose branch names match our tickets/* branch convention,
      # but in this case the build will fail with an error since the secret
      # won't be set.
      - name: Upload to LSST the Docs
        env:
          LTD_USERNAME: ${{ secrets.LTD_USERNAME }}
          LTD_PASSWORD: ${{ secrets.LTD_PASSWORD }}
        run: ltd upload --product gafaelfawr --gh --dir docs/_build/html
        if: >
          github.event_name != 'pull_request'
          || startsWith(github.head_ref, 'tickets/')

  build:
    runs-on: ubuntu-latest
    needs: [test]

    # Only do Docker builds of tagged releases and pull requests from ticket
    # branches.  This will still trigger on pull requests from untrusted
    # repositories whose branch names match our tickets/* branch convention,
    # but in this case the build will fail with an error since the secret
    # won't be set.
    if: >
      startsWith(github.ref, 'refs/tags/')
      || startsWith(github.head_ref, 'tickets/')

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # Reuse the built UI from the ui job.
      - name: Restore UI artifact
        uses: actions/download-artifact@v2
        with:
          name: ui
          path: ui/public

      - name: Define the Docker tag
        id: vars
        run: echo ::set-output name=tag::$(scripts/docker-tag.sh)

      - name: Print the tag
        id: print
        run: echo ${{steps.vars.outputs.tag}}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: lsstsqre/gafaelfawr:${{ steps.vars.outputs.tag }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
